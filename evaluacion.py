import streamlit as st
import openai
import difflib
import time
from contexto_equipo import chunks_equipo  # Chunks de los 3 TXT del equipo ideal
import base64
from io import BytesIO

# Inicializar cliente
client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

st.set_page_config(page_title="Evaluador de Equipo Fundador", page_icon="üßë‚Äçü§ù‚Äçüßë")
st.title("üë• Evaluador de Composici√≥n del Equipo Fundador")

# Funciones auxiliares
def obtener_contexto_relevante(user_input, n=5, min_similarity=0.2):
    # Ignorar entradas muy cortas para evitar coincidencias irrelevantes
    if len(user_input.strip()) < 5:
        return []
        
    similitudes = [(chunk, difflib.SequenceMatcher(None, user_input.lower(), chunk.lower()).ratio())
                   for chunk in chunks_equipo if len(chunk.strip()) > 50]  # Solo considerar chunks sustanciales
    
    # Filtrar por similitud m√≠nima y ordenar por relevancia
    chunks_relevantes = [(c, ratio) for c, ratio in similitudes if ratio > min_similarity]
    top_chunks = sorted(chunks_relevantes, key=lambda x: x[1], reverse=True)[:n]
    
    # Si no hay coincidencias buenas, usar algunos fragmentos importantes por defecto
    if not top_chunks:
        fragmentos_clave = [chunk for chunk in chunks_equipo 
                           if "Founders Market Fit" in chunk 
                           or "dilema del rey o rico" in chunk
                           or "equity story" in chunk
                           or "valores" in chunk][:n]
        return fragmentos_clave
        
    return [c[0] for c in top_chunks]

# Funci√≥n para crear HTML para exportar
def generar_html_para_pdf(secciones):
    # Estilo CSS
    html = """
    <html>
    <head>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 40px;
                line-height: 1.6;
            }
            h1 {
                color: #2C3E50;
                border-bottom: 2px solid #3498DB;
                padding-bottom: 10px;
            }
            h2 {
                color: #2980B9;
                margin-top: 30px;
            }
            .fortalezas {
                background-color: #E8F5E9;
                border-left: 5px solid #4CAF50;
                padding: 15px;
                margin: 20px 0;
            }
            .debilidades {
                background-color: #FFEBEE;
                border-left: 5px solid #F44336;
                padding: 15px;
                margin: 20px 0;
            }
            .recomendaciones {
                background-color: #E3F2FD;
                border-left: 5px solid #2196F3;
                padding: 15px;
                margin: 20px 0;
            }
            .capital {
                background-color: #FFF8E1;
                border-left: 5px solid #FFC107;
                padding: 15px;
                margin: 20px 0;
            }
            footer {
                margin-top: 50px;
                text-align: center;
                color: #7F8C8D;
                font-size: 12px;
                border-top: 1px solid #BDC3C7;
                padding-top: 15px;
            }
        </style>
    </head>
    <body>
        <h1>Diagn√≥stico del Equipo Fundador</h1>
        <p><em>Generado por Nuclio Founders</em></p>
    """
    
    # A√±adir secciones
    for s in secciones:
        if "Fortalezas" in s:
            html += f"""
            <div class="fortalezas">
                <h2>üí™ Fortalezas</h2>
                <p>{s.replace("Fortalezas:", "").strip()}</p>
            </div>
            """
        elif "Debilidades" in s:
            html += f"""
            <div class="debilidades">
                <h2>‚ö†Ô∏è Debilidades</h2>
                <p>{s.replace("Debilidades:", "").strip()}</p>
            </div>
            """
        elif "Recomendaciones" in s:
            html += f"""
            <div class="recomendaciones">
                <h2>üõ†Ô∏è Recomendaciones</h2>
                <p>{s.replace("Recomendaciones:", "").strip()}</p>
            </div>
            """
        elif "Distribuci√≥n del capital" in s:
            html += f"""
            <div class="capital">
                <h2>üìä Distribuci√≥n del Capital</h2>
                <p>{s.replace("Distribuci√≥n del capital:", "").strip()}</p>
            </div>
            """
    
    # A√±adir footer
    html += """
        <footer>
            <p>¬© Nuclio Founders - An√°lisis de Equipo Fundador</p>
        </footer>
    </body>
    </html>
    """
    
    return html

# Funci√≥n para crear un bot√≥n de descarga HTML
def create_download_link(html_content, filename="diagnostico.html"):
    b64 = base64.b64encode(html_content.encode()).decode()
    href = f'<a href="data:text/html;base64,{b64}" download="{filename}">üì• Descargar como HTML</a>'
    return href

# Inicializar estados
if "modo_equipo" not in st.session_state:
    st.session_state.modo_equipo = False

if "chat" not in st.session_state:
    st.session_state.chat = []

if "diagnostico_realizado" not in st.session_state:
    st.session_state.diagnostico_realizado = False

if "secciones_diagnostico" not in st.session_state:
    st.session_state.secciones_diagnostico = []

if "resultado_diagnostico" not in st.session_state:
    st.session_state.resultado_diagnostico = None

# Comenzar evaluaci√≥n
if not st.session_state.modo_equipo:
    st.write("Este chat analizar√° si tu equipo fundador est√° bien compuesto. Responder√°s 15 preguntas sobre dedicaci√≥n, capital, roles y equilibrio.")
    if st.button("Comenzar Evaluaci√≥n"):
        st.session_state.modo_equipo = True
        st.session_state.chat.append({
            "role": "system",
            "content": (
                "Eres el Director de Inversiones de un fondo de capital riesgo especializado en invertir en emprendedores y startups. "
                "Utiliza 'vosotros' en lugar de 'ustedes', tutea al usuario, y emplea vocabulario y expresiones propias de Espa√±a. Evita completamente t√©rminos o expresiones latinoamericanas. "
                "Tu tarea es evaluar la adecuaci√≥n y composici√≥n del equipo fundador de una empresa que busca inversi√≥n. "
                "Debes comunicarte EXACTAMENTE con el mismo estilo, tono y enfoque que Nuclio Founders. "
                "Utiliza ejemplos concretos, met√°foras sobre emprendimiento y el enfoque directo que caracteriza a Nuclio. "
                "Debes hacer justamente 15 preguntas espec√≠ficas, directas y claras sobre:\n\n"
                "- El modelo de negocio y el mercado\n"
                "- La composici√≥n y funciones del equipo fundador\n"
                "- La implicaci√≥n y dedicaci√≥n de cada cofundador\n"
                "- La distribuci√≥n de capital y su justificaci√≥n\n"
                "- La cohesi√≥n del equipo y c√≥mo toman decisiones\n"
                "- El compromiso a largo plazo\n\n"
                "Haz preguntas directas, profesionales y cr√≠ticas si es necesario. Pon en duda las respuestas cuando sea relevante. "
                "Detecta si hay desequilibrios entre capital y dedicaci√≥n, si hay conflictos no resueltos, o si falta claridad. "
                "Puedes usar simulaciones hipot√©ticas si ayudan a extraer informaci√≥n. Tu rol es de evaluador, no de animador. "
                "No expliques lo que haces. S√© claro, directo. "
                "Adopta el estilo de Nuclio Founders, que es directo y algo cabroncete a nivel de tener las cosas claras. "
                "Menciona conceptos clave de Nuclio como el 'Founders Market Fit', el 'dilema del rey o rico', y usa frases como 'emprender con alguien es como casarte'. "
                "Cuando hayas hecho las 15 preguntas, deja de preguntar y espera que el usuario pulse el bot√≥n 'Ver diagn√≥stico'."
            )
        })
        st.session_state.chat.append({
            "role": "assistant",
            "content": "Empecemos. ¬øCu√°l es el modelo de negocio de tu empresa y qu√© problema resuelve?"
        })

# Mostrar historial del chat
for msg in st.session_state.chat:
    if msg["role"] != "system":
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

# Input del usuario
if st.session_state.modo_equipo and not st.session_state.diagnostico_realizado:
    if prompt := st.chat_input("Escribe tu respuesta aqu√≠..."):
        with st.chat_message("user"):
            st.markdown(prompt)
        st.session_state.chat.append({"role": "user", "content": prompt})

        # A√±adir chunks relevantes como contexto auxiliar
        contextos = obtener_contexto_relevante(prompt)
        contexto_como_mensaje = {
            "role": "system",
            "content": (
                "Contexto de apoyo basado en el contenido formativo de Nuclio sobre equipos fundadores. "
                "DEBES adoptar el mismo tono, estilo, vocabulario y enfoque que se usa en estos textos. "
                "Imita su manera de expresarse y sus expresiones caracter√≠sticas. "
                "Usa las mismas met√°foras y ejemplos que aparecen en estos textos siempre que sea posible:\n\n" +
                "\n---\n".join(contextos)
            )
        }

        mensajes_con_contexto = [
            {"role": "system", "content": st.session_state.chat[0]["content"]},
            contexto_como_mensaje
        ] + st.session_state.chat[1:]

        # Llamada al modelo
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=mensajes_con_contexto,
            temperature=0.7
        )

        reply = response.choices[0].message.content
        st.session_state.chat.append({"role": "assistant", "content": reply})

        # Typing effect
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_text = ""
            for char in reply:
                full_text += char
                message_placeholder.markdown(full_text + "‚ñå")
                time.sleep(0.01)
            message_placeholder.markdown(full_text)

# Mostrar bot√≥n de diagn√≥stico tras 15 respuestas
respuestas_dadas = sum(1 for m in st.session_state.chat if m["role"] == "user")

# Depuraci√≥n
st.sidebar.write(f"DEBUG - Respuestas dadas: {respuestas_dadas}")
st.sidebar.write(f"DEBUG - Diagn√≥stico realizado: {st.session_state.diagnostico_realizado}")

if st.session_state.modo_equipo and respuestas_dadas >= 15 and not st.session_state.diagnostico_realizado:
    st.divider()
    if st.button("Ver diagn√≥stico del equipo", key="boton_diagnostico"):
        with st.spinner("üìä Analizando tu equipo..."):
            try:
                resumen_prompt = [
                    {
                        "role": "system",
                        "content": (
                            "Eres el Director de Inversiones de un fondo de capital riesgo. DEBES hacer un an√°lisis profesional sobre la composici√≥n del equipo fundador basado en esta conversaci√≥n. Tu respuesta DEBE contener EXACTAMENTE estas 4 secciones, en este orden y con estos t√≠tulos:\n\n"
                            "### Fortalezas:\nDescribe aqu√≠ las fortalezas del equipo\n\n"
                            "### Debilidades:\nDescribe aqu√≠ las debilidades del equipo\n\n"
                            "### Recomendaciones:\nDescribe aqu√≠ las recomendaciones\n\n"
                            "### Distribuci√≥n del capital:\nAnaliza aqu√≠ la distribuci√≥n del capital\n\n"
                            "ES OBLIGATORIO usar '###' antes de cada secci√≥n exactamente como mostrado arriba. NO generes mensajes de despedida, conclusiones ni texto adicional fuera de estas secciones. "
                            "S√© directo, claro y 'cabroncete' con tus conclusiones. No te andes con rodeos. "
                            "Usa conceptos como Founders Market Fit, el dilema del rey o rico, y met√°foras como 'emprender es como casarse'. "
                            "Incluye al menos 2-3 frases textuales que aparecen en los materiales de Nuclio."
                        )
                    }
                ] + st.session_state.chat

                resultado = client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=resumen_prompt,
                    temperature=0.7
                )

                resultado_final = resultado.choices[0].message.content
                
                # Verificar si el resultado tiene el formato esperado
                if ("### Fortalezas:" not in resultado_final or 
                    "### Debilidades:" not in resultado_final or 
                    "### Recomendaciones:" not in resultado_final or 
                    "### Distribuci√≥n del capital:" not in resultado_final):
                    
                    # Si no tiene el formato correcto, usar un diagn√≥stico de respaldo
                    st.warning("El modelo no gener√≥ el formato esperado. Usando diagn√≥stico de respaldo...")
                    
                    resultado_final = """### Fortalezas:
Basado en la conversaci√≥n, se observa que el equipo muestra inter√©s en estructurarse adecuadamente, lo cual es fundamental. Como decimos en Nuclio, "emprender con alguien es como casarte", y parece que est√°is conscientes de la importancia de tener una buena configuraci√≥n de cofundadores.

### Debilidades:
Se detectan posibles √°reas de mejora en la definici√≥n de roles y responsabilidades. Es importante recordar el "Founders Market Fit" - necesit√°is asegurar que cada cofundador aporta el valor adecuado en el momento adecuado del proyecto. Posiblemente falte claridad en c√≥mo se distribuyen las tareas y responsabilidades.

### Recomendaciones:
Os recomendar√≠a definir con mayor claridad los roles espec√≠ficos de cada cofundador, establecer expectativas claras sobre dedicaci√≥n y revisitar la distribuci√≥n de capital para que refleje las aportaciones reales. Como decimos siempre, es mejor jugar con la estad√≠stica a tu favor y no en tu contra al configurar el equipo inicial.

### Distribuci√≥n del capital:
Revisad si vuestra distribuci√≥n actual refleja el valor real que cada miembro aporta. Recordad el "dilema del rey o rico" - aseguraos de que todos los cofundadores est√°n alineados en sus motivaciones. La distribuci√≥n de equity debe reflejar no solo las aportaciones iniciales sino tambi√©n el compromiso futuro."""
                
                # Guardar el resultado en session_state
                st.session_state.resultado_diagnostico = resultado_final
                
                # Marcar como completado para que la pr√≥xima vez no vuelva a generarlo
                st.session_state.diagnostico_realizado = True
                
                # Recargar la p√°gina para mostrar el diagn√≥stico
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Ha ocurrido un error al generar el diagn√≥stico: {e}")

# Mostrar el diagn√≥stico si est√° disponible
if st.session_state.diagnostico_realizado and "resultado_diagnostico" in st.session_state:
    resultado_final = st.session_state.resultado_diagnostico
    
    if resultado_final:
        st.markdown("## üß† Diagn√≥stico del Equipo", unsafe_allow_html=True)
        secciones = resultado_final.split("###")
        st.session_state.secciones_diagnostico = secciones  # Guardar para generar HTML
        
        # Verificar si hay secciones con formato correcto
        seccion_encontrada = False
        
        for s in secciones:
            if "Fortalezas" in s:
                st.success("üí™ **Fortalezas**\n\n" + s.replace("Fortalezas:", "").strip())
                seccion_encontrada = True
            elif "Debilidades" in s:
                st.error("‚ö†Ô∏è **Debilidades**\n\n" + s.replace("Debilidades:", "").strip())
                seccion_encontrada = True
            elif "Recomendaciones" in s:
                st.info("üõ†Ô∏è **Recomendaciones**\n\n" + s.replace("Recomendaciones:", "").strip())
                seccion_encontrada = True
            elif "Distribuci√≥n del capital" in s:
                st.warning("üìä **Distribuci√≥n del capital**\n\n" + s.replace("Distribuci√≥n del capital:", "").strip())
                seccion_encontrada = True
            elif s.strip():  # Solo mostrar secciones no vac√≠as
                st.markdown(s.strip(), unsafe_allow_html=True)
        
        # Si no se encontr√≥ ninguna secci√≥n formateada correctamente
        if not seccion_encontrada:
            st.error("‚ùå El diagn√≥stico no se formate√≥ correctamente. Por favor, reinicia el diagn√≥stico.")
            if st.button("Reiniciar diagn√≥stico"):
                st.session_state.diagnostico_realizado = False
                st.rerun()
    else:
        st.error("‚ö†Ô∏è No se ha podido generar el diagn√≥stico. Int√©ntalo de nuevo.")
        if st.button("Reintentar diagn√≥stico"):
            st.session_state.diagnostico_realizado = False
            st.rerun()

# Mostrar bot√≥n de descarga HTML si el diagn√≥stico est√° listo
if st.session_state.diagnostico_realizado and st.session_state.secciones_diagnostico:
    # Generar HTML para descargar
    html_content = generar_html_para_pdf(st.session_state.secciones_diagnostico)
    
    # Mostrar bot√≥n de descarga
    st.markdown("""---""")
    st.markdown("### üìë Exportar diagn√≥stico")
    st.info("Puedes descargar este diagn√≥stico para compartirlo o imprimirlo.")
    
    # Bot√≥n de descarga
    st.markdown(create_download_link(html_content, "diagnostico_equipo_fundador.html"), unsafe_allow_html=True)
    
    # Nota explicativa
    st.caption("El archivo HTML se puede abrir en cualquier navegador y se puede imprimir como PDF desde all√≠.")
